openapi: 3.0.3
info:
  title: DCM Preparation Module - OpenAPI-Document
  description: |-
    This is the OpenAPI 3.0 specification describing Preparation Module-containers.
    A Preparation Module-container prepares an IP (Information Package) for
    SIP (Submission Information Package) transformation by a SIP Builder-container.
  version: 0.2.0
servers:
  - url: 'http://localhost:8080/'
externalDocs:
  description: See repository hosted by University of MÃ¼nster
  url: https://zivgitlab.uni-muenster.de/ULB/lzvnrw/team-se/dcm-preparation-module-api
tags:
  - name: preparation
    description: preparation-related endpoints
paths:
  /ping:
    get:
      summary: ping
      description: Use as connection test. Returns 'pong'.
      operationId: ping
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '400':
          $ref: '#/components/responses/400BadRequest'
  /status:
    get:
      summary: container status
      description: Returns Status (readiness) of container.
      operationId: get_status
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /identify:
    get:
      summary: container self-description
      description: Returns a detailed description of the container properties.
      operationId: identify
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfDescription'
        '400':
          $ref: '#/components/responses/400BadRequest'
  /report:
    get:
      summary: get report
      description: |-
        Returns Report if the job associated with the given token exists.
      operationId: get_report
      tags:
        - preparation
      parameters:
        - $ref: '#/components/parameters/Token'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Report'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/JobData'
                    example:
                      data:
                        success: false
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '503':
          $ref: '#/components/responses/503Busy'
  /prepare:
    post:
      summary: prepare IP
      description: |-
        Prepare a given Information Package (IP) for transformation into a
        Submission Information Package (SIP). If the request is accepted, a
        201-response is triggered containing a JobToken.
      operationId: prepare
      tags:
        - preparation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                preparation:
                  type: object
                  properties:
                    target:
                      $ref: '#/components/schemas/Target'
                    bagInfoOperations:
                      title: BagInfoOperations
                      type: array
                      description:
                        metadata-operations to perform on baginfo metadata
                      items:
                        anyOf:
                          - $ref: '#/components/schemas/ComplementOperation'
                          - $ref: '#/components/schemas/OverwriteExistingOperation'
                          - $ref: '#/components/schemas/FindAndReplaceOperation'
                          - $ref: '#/components/schemas/FindAndReplaceLiteralOperation'
                    sigPropOperations:
                      title: SigPropOperations
                      type: array
                      description:
                        metadata-operations to perform on significant properties/
                        PREMIS metadata
                      items:
                        anyOf:
                          - $ref: '#/components/schemas/ComplementOperation'
                          - $ref: '#/components/schemas/OverwriteExistingOperation'
                          - $ref: '#/components/schemas/FindAndReplaceOperation'
                          - $ref: '#/components/schemas/FindAndReplaceLiteralOperation'
                  required:
                    - target
                token:
                  type: string
                  description:
                    idempotency identifier; if submitted previously, returns
                    the associated job token; otherwise uses this value as
                    new token's value
                  example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
                callbackUrl:
                  $ref: '#/components/schemas/CallbackUrl'
              required:
                - prepare
      callbacks:
        termination:
          $ref: '#/components/callbacks/termination'
      responses:
        '201':
          $ref: '#/components/responses/201AcceptedSubmission'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '404':
          $ref: '#/components/responses/404NoTarget'
        '422':
          $ref: '#/components/responses/422SemanticProblem'
        '503':
          $ref: '#/components/responses/503Busy'
    delete:
      summary: abort job
      description:
        Aborts the execution of a job (if already running) or removes it
        from queue (otherwise). This operation is performed
        synchronously.
      operationId: abort
      tags:
        - preparation
      parameters:
        - $ref: '#/components/parameters/Token'
        - name: broadcast
          in: query
          description:
            whether this request should be broadcasted
            (only relevant in parallel deployment and only if message
            broadcasting is configured)
          schema:
            type: boolean
            default: true
          required: false
        - name: re-queue
          in: query
          description:
            whether the associated token should be added to the queue
            again
          schema:
            type: boolean
            default: false
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                origin:
                  type: string
                  description: verbose origin of request
                  example: frontend
                reason:
                  type: string
                  description: verbose reason for request
                  example: user abort
      responses:
        '200':
          description: success
          content:
            text/plain:
              schema:
                type: string
                example:
                  "successfully aborted '37ee72d6-80ab-4dcd-a68d-f8d32766c80d'"
        '400':
          $ref: '#/components/responses/400BadRequest'
        '502':
          description: bad gateway
          content:
            text/plain:
              schema:
                type: string
                example:
                  "notification service unavailable"
components:
  schemas:
    Status:
      title: ContainerStatus
      description:
        A ContainerStatus gives a summary of the container's status like
        availability for job submissions
      type: object
      properties:
        ready:
          type: boolean
          description: availability of container for a request
          example: true
      required:
        - ready
    ISODateTime:
      title: ISODateTime
      description: ISO-8601 datetime-stamp
      type: string
      pattern: /[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[+-][0-9]{2}:[0-9]{2}/
      example: "2024-01-01T00:00:00+01:00"
    Token: # see also components/parameters/Token
      title: Token
      description: unique identifier
      type: string
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
    JobToken:
      title: JobToken
      description:
        A JobToken is used to uniquely identify a specific job.
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Token'
        expires:
          type: boolean
          description: does the token expire
          example: true
        expires_at:
          $ref: '#/components/schemas/ISODateTime'
      required:
        - value
        - expires
    LogMessage:
      title: LogMessage
      description: |-
        This schema defines the format of the entries occurring in the
        log of a Report. A LogMessage consists of

        * datetime information (regarding time of message creation),
        * an origin (who filed this message), and
        * the actual message.
      type: object
      properties:
        datetime:
          $ref: '#/components/schemas/ISODateTime'
        origin:
          type: string
          description: origin of message creation
          example: Backend
        body:
          type: string
          description: message body
          example: Queued job.
      required:
        - datetime
        - origin
        - body
    Log:
      title: Log
      description: |-
        Common Log categories are: ERROR, WARNING, INFO, EVENT,
        NETWORK, FILE_SYSTEM, STARTUP, SHUTDOWN, USER,
        AUTHENTICATION, and SECURITY.
      type: object
      additionalProperties:
        title: LogCategory
        description: |-
          list of LogMessage objects
        type: array
        items:
          $ref: "#/components/schemas/LogMessage"
      example:
        EVENT:
          - datetime: "2024-01-01T00:00:00+01:00"
            origin: Backend
            body: Queued job.
          - datetime: "2024-01-01T00:00:02+01:00"
            origin: Backend
            body: Job exited normally.
    BaseOperation:
      title: BaseOperation
      description: common properties of all operations
      type: object
      properties:
        type:
          type: string
          description: operation type identifier
          enum:
            - complement
            - overwriteExisting
            - findAndReplace
            - findAndReplaceLiteral
        targetField:
          type: string
          description: target metadata field
          example: DC-Rights
      required:
        - type
        - targetField
    ComplementOperation:
      title: ComplementOperation
      description: |-
        complementing operation

        sets field to value if it does not yet exist
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            value:
              type: string
              description: new value
              example: "http://rightsstatements.org/vocab/InC/1.0/"
          required:
            - value
    OverwriteExistingOperation:
      title: OverwriteExistingOperation
      description: |-
        overwriting operation

        overwrites field by value if it already exists (at least once)
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            value:
              type: string
              description: new value
              example: "http://rightsstatements.org/vocab/InC/1.0/"
          required:
            - value
    FindAndReplaceOperation:
      title: FindAndReplaceOperation
      description: |-
        find&replace-operation

        replaces current field values where the old value matches the
        provided regex
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            items:
              type: array
              description: values to be found and replaced
              items:
                type: object
                description: match-value pair for replacement
                properties:
                  regex:
                    type: string
                    description: regex pattern to be matched (fullmatch)
                    example: http://rightsstatements.org/vocab/[a-zA-Z]+/1.0/
                  value:
                    type: string
                    description: new value
                    example: "http://rightsstatements.org/vocab/InC/1.0/"
                required:
                  - regex
                  - value
          required:
            - items
    FindAndReplaceLiteralOperation:
      title: FindAndReplaceLiteralOperation
      description: |-
        find&replace-operation using literal values

        replaces current field values where the old value exactly matches
        the provided literal

        Note that all inputs, i.e., old value, match value, and new value
        are trimmed before use.
      type: object
      allOf:
        - $ref: '#/components/schemas/BaseOperation'
        - type: object
          properties:
            items:
              type: array
              description: values to be found and replaced
              items:
                type: object
                description: match-value pair for replacement
                properties:
                  literal:
                    type: string
                    description: literal text to be matched
                    example: "http://rightsstatements.org/vocab/InC-NC/1.0/"
                  value:
                    type: string
                    description: new value
                    example: "http://rightsstatements.org/vocab/InC/1.0/"
                required:
                  - literal
                  - value
          required:
            - items
    Path:
      type: string
      description: relative path for referencing an IP in file storage
      example: jobs/abcde-12345-fghijk-67890
    Target:
      title: Target
      description:
        Target IP to be prepared for SIP-transformation. It is represented
        by its relative path within the shared filesystem.
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
      required:
        - path
    JobData:
      title: JobData
      description: |-
        job output data (data-property in Report schema)
      type: object
      properties:
        path:
          $ref: '#/components/schemas/Path'
        success:
          type: boolean
          description: overall success of the job
      example:
        path: jobs/abcde-12345-fghijk-67890
        success: false
    Report:
      title: Report
      description: |-
        A Report contains

        * information on job details (host, token),
        * information on the progress of a job,
        * a collection of log messages (categorized), and
        * job output data.
      type: object
      properties:
        host:
          type: string
          description: service url where this report has been generated
          example: https://www.lzv.nrw/transfer_module
        token:
          $ref: '#/components/schemas/JobToken'
        args:
          type: object
          description: request body contents given during submission
        progress:
          type: object
          properties:
            status:
              type: string
              description: job status in processing pipeline
              enum:
                - queued
                - running
                - aborted
                - completed
            verbose:
              type: string
              description: verbose description of job-progress
              example: mapping metadata
            numeric:
              type: integer
              description: numeric representation of progress in percent
              example: 25
          required:
            - status
            - verbose
            - numeric
        log:
          $ref: '#/components/schemas/Log'
      required:
        - host
        - token
        - args
        - progress
        - log
      example:
        host: https://www.lzv.nrw/backend
        token:
          value: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
          expires: true
          expires_at: "2024-01-01T00:00:00+01:00"
        args:
          ingest:
            subdir: 2468edf8-6706-4ff0-bd03-04512d082c28
            producer: "12345678"
            material_flow: "12345678"
        progress:
          status: completed
          verbose: Job terminated normally.
          numeric: 100
        log:
          ERROR:
            - datetime: "2024-01-01T00:00:01+01:00"
              origin: Backend
              body: Problem occurred during SIP-ingest.
          EVENT:
            - datetime: "2024-01-01T00:00:00+01:00"
              origin: Backend
              body: Job accepted.
            - datetime: "2024-01-01T00:00:02+01:00"
              origin: Backend
              body: Job terminated.
    CallbackUrl:
      type: string
      description: job-termination callback url
      example: https://www.lzv.nrw/callback
    Plugin:
      title: Plugin
      type: object
      description: DCM-service plugin
      properties:
        name:
          type: string
          description: plugin identifier
          example: plugin-0
        description:
          type: string
          description: description of plugin features
          example: this plugin performs ...
      required:
        - name
        - description
    DBAdapter:
      title: DBAdapter
      type: object
      description:
        A DBAdapter characterizes an adapter for a database by type and
        initialization settings.
      properties:
        type:
          type: string
          description: which adapter-type to use
          enum:
            - native
            - http
            - postgres
          example: http
        settings:
          type: object
          description: |-
            JSON object used to initialize the adapter

            adapter-specific set of settings (used during
            initialization); see dcm-common.db-subpackage for details
          additionalProperties: true
          example:
            url: https://www.lzv.nrw/db
            timeout: 10
            proxies:
              http: https://www.lzv.nrw/proxy
      required:
        - type
        - settings
    SelfDescription:
      type: object
      description: information regarding the service's properties
      properties:
        description:
          type: string
          description:
            a verbose self-description of the service functionality
          example:
            This service provides endpoints for ...
        version:
          type: object
          description: collection of version strings
          properties:
            api:
              type: string
              description: version string of the implemented API
              example: "0.2.0"
            app:
              type: string
              description: version string of the app
              example: "0.1.0"
            python:
              type: string
              description: version of the python implementation
              example: 3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]
            software:
              type: object
              description: deployed software versions
            lib:
              type: object
              description: deployed library versions
              additionalProperties:
                type: string
                description: version string
                example: "0.1.0"
              example:
                dependency-a: "1.0.0"
                dependency-b: "0.2.0.post1"
          required:
            - api
            - app
            - python
            - software
            - lib
        configuration:
          type: object
          description: service configuration details
          properties:
            settings:
              type: object
              properties:
                allow_cors:
                  type: boolean
                  description: whether CORS requests are allowed
                  example: true
                fs_mount_point:
                  type: string
                  description: mount point of shared file system
                  example: /file_storage
                orchestration:
                  type: object
                  description: orchestration-related settings
                  properties:
                    at_startup:
                      type: boolean
                      description:
                        whether orchestration-processing loop is run at startup
                      example: true
                    queue:
                      $ref: '#/components/schemas/DBAdapter'
                    registry:
                      $ref: '#/components/schemas/DBAdapter'
                    token:
                      type: object
                      description: orchestration token-related settings
                      properties:
                        expiration:
                          type: boolean
                          description: whether job tokens (and their
                            associated info like report) expire
                          example: true
                        duration:
                          type: integer
                          description:
                            time until job token expires in seconds
                          example: 3600
                      required:
                        - expiration
                        - duration
                    debug:
                      type: boolean
                      description: whether to have orchestrator print
                        debug-information
                      example: true
                    controls_api:
                      type: boolean
                      description: whether the orchestration-controls
                        API is available
                      example: true
                    abort:
                      type: object
                      description: |-
                        abort-related settings

                        only relevant in parallel deployment
                      properties:
                        subscription:
                          type: boolean
                          description:
                            whether a subscription to the abort-notifications
                            is made
                          example: true
                        url:
                          type: string
                          description: url of the notification service
                          example: https://www.lzv.nrw/abort-notifications
                        timeout:
                          type: object
                          description: timeout-related settings
                          properties:
                            duration:
                              type: number
                              description: timeout duration
                              example: 1.0
                          required:
                            - duration
                        callback:
                          type: string
                          description: |-
                            url for abort-callbacks

                            if omitted, the subscriber's request address
                            is used (as determined by the notification
                            service)
                          example: https://www.lzv.nrw/subscriber
                      required:
                        - subscription
                    daemon_interval:
                      type: number
                      description:
                        interval of orchestrator-restarts (after crash) in
                        seconds
                      example: 1
                    orchestrator_interval:
                      type: number
                      description: time in seconds between each iteration
                        of the orchestrator's processing loop
                      example: 1
                  required:
                    - at_startup
                    - queue
                    - registry
                    - token
                    - debug
                    - controls_api
                    - abort
                preparation:
                  type: object
                  description: preparation-related settings
                  properties:
                    output:
                      type: string
                      description:
                        output directory for the prepared IPs (relative to fs_mount_point)
                      example: pip/
                  required:
                    - output
              required:
                - allow_cors
                - orchestration
                - database
                - scheduling
                - job
                - ingest
                - user
            plugins:
              type: object
              description: mapping of available plugins
              additionalProperties:
                $ref: "#/components/schemas/Plugin"
              example:
                plugin-0:
                  name: plugin-0
                  description: this plugin performs ...
            services:
              type: object
              description:
                mapping of hostname and url for secondary DCM-services
              additionalProperties:
                title: Service
                type: string
                format: url
              example:
                service: <service-url>
          required:
            - settings
            - plugins
            - services
      required:
        - description
        - version
        - configuration
  parameters:
    Token: # see also components/schemas/Token
      in: query
      name: token
      required: true
      description:
        unique identifier for jobs
      example: 37ee72d6-80ab-4dcd-a68d-f8d32766c80d
      schema:
        $ref: '#/components/schemas/Token'
  responses:
    201AcceptedSubmission:
      description: submission success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobToken'
    400BadRequest:
      description: malformed request body
      content:
        text/plain:
          schema:
            type: string
            example: "Missing required argument <X>"
    404NoTarget:
      description: target not found
      content:
        text/plain:
          schema:
            type: string
            example: "Resource not found. Target does not exist."
    409Conflict:
      description: conflicting data
      content:
        text/plain:
          schema:
            type: string
            example: "Resource does already exist."
    422SemanticProblem:
      description: semantic problem
      content:
        text/plain:
          schema:
            type: string
            example: "Argument <X> has the wrong type"
    502BadGateway:
      description: bad gateway
      content:
        text/plain:
          schema:
            type: string
            example:
              "notification service unavailable"
    503Busy:
      description: container is busy
      content:
        text/plain:
          schema:
            type: string
            example: "Service unavailable: maximum number of submissions reached."
  callbacks:
    termination:
      '{$request.body#/CallbackUrl}':
        post:
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/JobToken'
          responses:
            '200':
              description: accept callback